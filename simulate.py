import pybullet as p
import pybullet_data
import time
import pyrosim.pyrosim as pyrosim
import numpy
import math
import random

physicsClient = p.connect(p.GUI)
p.setAdditionalSearchPath(pybullet_data.getDataPath())
#p.configureDebugVisualizer(p.COV_ENABLE_GUI, 0)
# adding the force of gravity
p.setGravity(0,0,-9.8)
# adding a floor
planeId = p.loadURDF("plane.urdf")
robotId = p.loadURDF("body.urdf")

# loading in the world stored in box.sdf generated by generate.py
p.loadSDF("world.sdf")
pyrosim.Prepare_To_Simulate(robotId)
# note: the length of the array must match the for loop index
backLegSensorValues = numpy.zeros(1000)
frontLegSensorValues = numpy.zeros(1000)

frontLegAmplitude = math.pi/4.0
frontLegFrequency = 10
frontLegPhaseOffset = 0

frontLegTargetAngles = numpy.sin((numpy.linspace(0, 2*math.pi, 1000)*frontLegFrequency) + frontLegPhaseOffset)*frontLegAmplitude
numpy.save('data/front_leg_target_angles.npy', frontLegTargetAngles)

backLegAmplitude = math.pi/8.0
backLegFrequency = 10
backLegPhaseOffset = math.pi/8.0

backLegTargetAngles = numpy.sin((numpy.linspace(0, 2*math.pi, 1000)*backLegFrequency) + backLegPhaseOffset)*backLegAmplitude
numpy.save('data/back_leg_target_angles.npy', backLegTargetAngles)

#position control: motor rees a target position as input
#velocity control: continously rotating objects where the velocity desired is input

#the target position is the angle between the links of the joint, it always starts as 0 (positive is outwards)
for i in range(1000):
    p.stepSimulation()
    backLegSensorValues[i] = pyrosim.Get_Touch_Sensor_Value_For_Link("BackLeg")
    frontLegSensorValues[i] = pyrosim.Get_Touch_Sensor_Value_For_Link("FrontLeg")
    pyrosim.Set_Motor_For_Joint(

        bodyIndex= robotId,

        jointName="Torso_BackLeg",

        controlMode= p.POSITION_CONTROL,

        targetPosition= backLegTargetAngles[i],

        maxForce=500)

    pyrosim.Set_Motor_For_Joint(

        bodyIndex=robotId,

        jointName="Torso_FrontLeg",

        controlMode=p.POSITION_CONTROL,

        targetPosition= frontLegTargetAngles[i],

        maxForce=500)
    time.sleep(1/60)
    #print(i)
numpy.save('data/back_sensor_output.npy', backLegSensorValues)
numpy.save('data/front_sensor_output.npy', frontLegSensorValues)

p.disconnect()

